#!/usr/bin/python3
#
# scan_ports.py - Programa para escanear portas TCP de um alvo
#
# Autor     : Matheus Rodrigues
# Manutenção: Matheus Rodrigues
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa tem a função de fazer um port scan em portas TCP e retornar como resposta
#   quais portas estão abertas e quais portas estão fechadas no endereço e nas portas que 
#   o usuário informar ao programa
# 
# Exemplos:
#   $ ./nome_do_programa.py <endereço> <porta>
#   $ ./nome_do_programa.py <192.168.0.2> <80,443>
#   $ ./nome_do_programa.py <192.168.0.2> <80,443,1-1024>
#   $ ./nome_do_programa.py <scanme.nmap.org> <80,443>
#   $ ./nome_do_programa.py <scanme.nmap.org> <80,443,1-1024>
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 22/09/2023, Matheus Rodrigues
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-79-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash
#
# -------------------------------- Importação de Pacotes --------------------------------
import sys      # Biblioteca Built-in python
import socket   # Biblioteca Built-in python
import re       # Biblioteca Built-in python
#
# ---------------------------------- Variaveis Globais ----------------------------------
nomeDoPrograma = sys.argv[0]
coresDoPrograma = {
    'vermelho': '\033[31;1m',
    'verde': '\033[32;1m',
    'normal': '\033[m'
}

menuDeAjuda = f'''
{coresDoPrograma["vermelho"]}{'#' * 60}{coresDoPrograma["normal"]}
\nModo de uso:

{nomeDoPrograma} [ip] [porta]
    exemplo: {nomeDoPrograma} 192.168.0.2 80
    exemplo: {nomeDoPrograma} 192.168.0.2 80,21,1-1024
    exemplo: {nomeDoPrograma} scanme.nmap.org 80
    exemplo: {nomeDoPrograma} scanme.nmap.org 80,21,1-1024
\n{coresDoPrograma["vermelho"]}{'#' * 60}{coresDoPrograma["normal"]}
'''

listaDePortas = []
#
# --------------------------------- Execução do Programa ---------------------------------
try:    # Verificando se o usuário informou a quantidade de argumentos necessários
    ip = sys.argv[1]
    portas = sys.argv[2]
except:
    print(menuDeAjuda)
    sys.exit()

# Transformando as portas informadas ao programa, em um conjunto de dados do tipo lista
portas = str(portas).split(',')  

# Percorrendo a lista de portas informadas para indexar o intervalo de portas e as portas únicas 
# em um nova lista para que desta forma o scan possa ser realizado
for porta in portas:
    if ( re.match(r'^\d+-\d+$', porta)):                  # Se for um intervalo de portas ex: 1-1023
        portaInicio, portaFinal = map(int, porta.split('-'))
        if ( portaInicio > 65535 or portaFinal > 65535 ): # Se porta informada maior que 65535
            print(f'Porta informada: {coresDoPrograma["vermelho"]}{porta}{coresDoPrograma["normal"]}')
            print('Informe uma porta válida: <0-65535>')
            sys.exit() 
        # Acrescentado o intervalo de portas na lista
        listaDePortas.extend(range(portaInicio, portaFinal + 1)) 
    elif ( re.match(r'^\d+$', porta)):                     # Se for uma porta especifica ex: 80
        # Acrescentando a porta especifica na lista
        listaDePortas.append(int(porta))
    # Se o usuário informar uma porta que não seja número
    # Se o usuário informar uma porta maior (>) que 65535 que ultraprassa os 16 bits do protocolo TCP
    elif ( not porta.isnumeric() or int(porta) > 65535 ):
        print(f'Porta informada: {coresDoPrograma["vermelho"]}{porta}{coresDoPrograma["normal"]}')
        print('Informe uma porta válida: <0-65535>')
        sys.exit() 

for porta in listaDePortas:
    cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Criando o cliente TCP  
    cliente.settimeout(0.4) # Definindo um tempo limite para que a conexão seja estabelecida

    try: # Testando conexão com o endereço informado
        resposta = cliente.connect_ex((ip, porta))
    except (KeyboardInterrupt):
        sys.exit()
    except:
        print(menuDeAjuda)
        sys.exit()

    if ( resposta == 0 ): # Se a resposta for 0 a conexão foi estabelecida com sucesso
        print(f'{coresDoPrograma["verde"]}[+]{coresDoPrograma["normal"]} Porta ({porta}/tcp) aberta')
    else:
        print(f'{coresDoPrograma["vermelho"]}[-]{coresDoPrograma["normal"]} Porta ({porta}/tcp) fechada')

    cliente.close()
##########################################################################################