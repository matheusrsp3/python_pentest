#!/usr/bin/python3
#
# scan_discovery.py - Programa para fazer uma listagem de diretórios e arquivos em um site
#
# Autor     : Matheus Rodrigues (mcarvalho)
# Manutenção: Matheus Rodrigues (mcarvalho)
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa foi desenvolvido para listar os diretórios e arquivos de um site.
#   Ele utiliza a biblioteca requests do Python para realizar requisições ao site e exibir o
#   Status Code HTTP na tela. Isso permite informar ao usuário sobre a existência do diretório
#   ou arquivo no site.
# 
# Exemplos:
#   $ ./scan_discovery.py
#   $ Vai executar o programa
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 08/08/2023, Matheus Rodrigues  
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-78-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash         - 5.2.15
#
# -------------------------------- Importação de Pacotes --------------------------------
import re # Biblioteca built-in do Python

# Bloco TRY verificando se não vai ocorrer nenhum erro pela falta do pacote [requests]
try:
    import requests
except (ModuleNotFoundError):
    print(f'O pacote [requests] não foi encontrado')
    print('Instale o pacote!')
    exit(1)

# Bloco TRY verificando se não vai ocorrer nenhum erro pela falta do pacote [pyfiglet]
try:
    import pyfiglet
except (ModuleNotFoundError):
    print(f'O pacote [ pyfiglet ] não foi encontrado')
    print('Instale o pacote!')
    exit(1)

# ---------------------------------- Variaveis Globais ----------------------------------
coresPrograma = {
    'vermelho': '\033[31;1m',
    'verde': '\033[32;1m',
    'normal': '\033[m'
}

tituloPrograma = pyfiglet.figlet_format('BEM - VINDO')

cabecalhoDoPrograma = f'''
{'#' * 40}
#{coresPrograma["vermelho"]}{'Exemplo de uso do programa:':^38}{coresPrograma["normal"]}#
#{'':^38}#
#{coresPrograma["verde"]}{'     Site: https://meusite.com':<38}{coresPrograma["normal"]}#
#{coresPrograma["verde"]}{' Wordlist: ./pasta/wordlist.txt':<38}{coresPrograma["normal"]}#
#{'':^38}#
#{'':^38}#
#{'  Autor: Matheus Rodrigues':<38}#
#{' Versão: v1.0 - 08/08/2023':<38}#
{'#' * 40}
'''

# --------------------------------------- Funções ---------------------------------------
def removerBarraFinalDaUrl(url):
    # ReGex que vai remover "qualquer /" que o usuário possa colocar no fim da URL 
    return re.sub(r'/{1,}$', '', url) 

# --------------------------------- Execução do Programa ---------------------------------
print(tituloPrograma, cabecalhoDoPrograma)

# Site que vai ser realizado a listagem de diretórios e arquivos
siteParaListagem = input('Site: ') or 'nenhum site foi informado' 
# Removendo qualquer barra inadequada que o usuário possa ter colocado no final da URL
siteParaListagem = removerBarraFinalDaUrl(siteParaListagem)
# Wordlist que o usuário deve passar para o programa
wordlistParaBusca = input('Wordlist: ') or 'nenhum arquivo foi informado' 

try: # Bloco TRY verificando "qualquer" falha que possa ocorrer com o arquivo
    arquivoDeWordlist = open(wordlistParaBusca)
except: # Se ocorrer "qualquer" falha no arquivo encerre o programa
    print('\nVerifique o caminho do arquivo informado')
    print(f'Caminho do arquivo informado: {coresPrograma["vermelho"]}{wordlistParaBusca}{coresPrograma["normal"]}\n')
    exit(1)

try: # Bloco TRY verificando URL que usuário informou se é uma URL válida 
    requests.get(siteParaListagem)
except: # Se não a URL não for válida encerre o programa
    print('\nVerifique o caminho da URL informada')
    print(f'Caminho da URL informada: {coresPrograma["vermelho"]}{siteParaListagem}{coresPrograma["normal"]}\n')
    exit(1)

print() # Linha em branco entre o cabeçalho e as requisições

try: # Bloco TRY verificando se o usuário não vai encerrar o programa com CTRL-C  
    for linhaWordlist in arquivoDeWordlist.readlines():
        # Substituindo o sinal de '%0A' que a função "readlines()" captura do arquivo por padrão
        # esse sinal '%0A' indica uma quebra de linha, abaixo estou removendo esse sinal da minha
        # variável 
        linhaWordlist = linhaWordlist.replace('\n', '') 

        # Fazendo a requisição para o site utilizando o método GET
        requisicao = requests.get(f'{siteParaListagem}/{linhaWordlist}')

        if (requisicao.status_code == 200): # Status code HTTP 200 requisição bem-sucedida
            print(f'{requisicao.url} - {coresPrograma["verde"]}Status Code HTTP: {requisicao.status_code}{coresPrograma["normal"]}')
        else: # Status code HTTP diferente de 200 requisição mal-sucedida
            print(f'{requisicao.url} - {coresPrograma["vermelho"]}Status Code HTTP: {requisicao.status_code}{coresPrograma["normal"]}')

    print(f'\n{coresPrograma["verde"]}Listagem encerrada...\n{coresPrograma["normal"]}')

except (KeyboardInterrupt): # Caso o usuário encerre o programa com  CTRL-C
    print(f'\n{coresPrograma["vermelho"]}Listagem encerrada...\n{coresPrograma["normal"]}')
