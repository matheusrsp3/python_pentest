#!/usr/bin/python3
#
# cliente_ssh.py - Um cliente para conexão SSH
#
# Autor     : Matheus Rodrigues
# Manutenção: Matheus Rodrigues
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa vai criar um cliente para realizar conexões SSH, bastando apenas o
#   usuário informar o endereço IP e a porta que ele deseja se conectar, depois realizar
#   a autenticação com suas credenciais de acesso.
# 
# Exemplos:
#   $ ./cliente_ssh.py  <ip> <porta>
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 31/08/2023, Matheus Rodrigues
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-79-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash         - 5.2.15
#
# -------------------------------- Importação de Pacotes --------------------------------
import sys                     # Biblioteca built-in do Python
import re                      # Biblioteca built-in do Python
from getpass import getpass    # Biblioteca built-in do Python

try:    # Importando a biblioteca paramiko
    import paramiko
except: # Caso a importação falhar
    print('Verifique se o pacote [ paramiko ] está instalado')
    exit()
#
# ---------------------------------- Variaveis Globais ----------------------------------
clienteSSH = paramiko.SSHClient()   # Criando o cliente SSH
# Definindo a política de aceitação de chaves ausentes ou desconhecidas
clienteSSH.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# ReGex que contém o formato de IP padrão que o usuário deve informar com primeiro argumento
ipPadrao = '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$' 

coresDoPrograma = {
    'vermelho': '\033[31;1m',
    'normal': '\033[m'
}

nomeDoPrograma = sys.argv[0]

menuAjuda = f'''
{'#' * 40}
Modo de uso:
{nomeDoPrograma[2:]} <ip> <porta>
    {nomeDoPrograma[2:]} 192.168.0.1 1234
{'#' * 40}
'''
#
# --------------------------------- Execução do Programa ---------------------------------
try:    # Verificando se o usuário informou o primeiro e o segundo argumento ao programa
    ip = sys.argv[1]
    porta = int(sys.argv[2])
except: # Se usuário não informou imprimir menu de ajuda
    print(menuAjuda)
    exit()

if (not re.fullmatch(ipPadrao, ip)): # Verificando se é um IP válido
    print('Informe um endereço IP válido no formato: <0-255.0-255.0-255.0-255>')
    exit()
elif (porta > 65535):                # Verificando se é uma PORTA válida
    print('Informe uma porta válida entre <0-65535>')
    exit()

usuario = input('Usuário: ')
senha = getpass('Senha: ')

try:                                                     # Estabelecendo conexão  
    clienteSSH.connect(hostname=ip, port=porta, username=usuario, password=senha)
except (paramiko.ssh_exception.AuthenticationException): # Usuário ou senha estão incorretos
    print(f'{coresDoPrograma["vermelho"]}Usuário ou senha incorretos{coresDoPrograma["normal"]}')
    exit()
except:                                                  # Host ou porta impedindo a conexão
    print(f'{coresDoPrograma["vermelho"]}Falha de conexão verifique o host informado e a porta{coresDoPrograma["normal"]}')
    exit()

print('Conexão estabelecida...')
print(f'Para encerrar a conexão digite {coresDoPrograma["vermelho"]}SAIR{coresDoPrograma["normal"]}')

while True:
    comando = input('prompt> ')     # Aguardando usuário informar o comando para executar
    if (comando.lower() == 'sair'): # Usuário encerrou a conexão
        exit()

    stdin, stdout, stderr = clienteSSH.exec_command(comando) # Executando o comando do usuário
    for saida in stdout.readlines():
        print(saida, end='')                                 # Imprimindo saída (stdout)
    if (stderr):
        for erro in stderr.readlines():                      
            print(erro, end='')                              # Imprimindo saída (stderr) 
##########################################################################################