#!/usr/bin/python3
#
# cliente_tcp.py - Um cliente para realizar conexões TCP
#
# Autor     : Matheus Rodrigues (mcarvalho)
# Manutenção: Matheus Rodrigues (mcarvalho)
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa é um cliente para estabelecer conexões do tipo TCP e manter há conexão
#   até que o usuário encerre a conexão com a palavra "sair"
# 
# Exemplos:
#   $ ./cliente_tcp.py <ip> <porta>
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 29/08/2023, Matheus Rodrigues
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-79-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash         - 5.2.15
#
# -------------------------------- Importação de Pacotes --------------------------------
import socket # Bliblioteca built-in do Python
import sys    # Bliblioteca built-in do Python
import re     # Bliblioteca built-in do Python
#
# ---------------------------------- Variaveis Globais ----------------------------------
# Criando o cliente IPv4, TCP 
cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# ReGex que contém o padrão de IP que usuário deve informar ao programa
# Sendo esse padrão <0-255.0-255.0-255.0-255>
ipPadrao = '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'

# Obtendo IP do cliente
ipCliente = socket.gethostbyname(socket.gethostname())

coresDoPrograma = {
    'vermelho': '\033[31;1m',
    'normal': '\033[m'
}

nomeDoPrograma = sys.argv[0]

menuAjuda = f'''
{'#' * 40}
Modo de uso:
{nomeDoPrograma[2:]} <ip> <porta>
    {nomeDoPrograma[2:]} 192.168.0.1 22
{'#' * 40}
'''
#
# --------------------------------- Execução do Programa ---------------------------------
try:    # Verificando se usuário informou primeiro e segundo argumento
    ipServidor = sys.argv[1]         # Primeiro argumento deve ser o endereço IP
    portaServidor = int(sys.argv[2]) # Segundo argumento deve ser a Porta sendo do tipo inteiro
except: # Se o usuário não informou primeiro e segunfo argumento imprima menu de ajuda na tela
    print(menuAjuda)
    exit()

if (not re.fullmatch(ipPadrao, ipServidor)): # Verificando se é um endereço IP válido
    print('Informe um endereço IP válido no formato: <0-255.0-255.0-255.0-255>')
    exit()
elif (portaServidor > 65535):                # Verificando se é uma porta válida
    print('Informe uma porta válida entre <0-65535>')
    exit()

try:    # Estabelecendo conexão com o servidor
    print('Estabelecendo conexão aguarde...')
    cliente.settimeout(5)    # Definindo um tempo para estabelecer a conexão
    cliente.connect((ipServidor, portaServidor))
    cliente.settimeout(None) # Zerando o tempo para não afetar nas outras operações do programa
except: # Conexão com o servidor falhou
    print('Houve um erro de conexão:\nVerifique o IP e a PORTA informada')
    print(f'IP: {ipServidor}\nPorta: {portaServidor}')
    exit()

print('Se quiser encerrar a conexão digite: SAIR')
print(f'{coresDoPrograma["vermelho"]}Após enviar sua mensagem aguarde a resposta do servidor{coresDoPrograma["normal"]}')
while True:
    mensagemCliente = input(f'< {ipCliente} >: ') + '\n'
    
    if (mensagemCliente.lower() == 'sair\n'):               # Cliente encerrou a conexão 
        cliente.send('Conexão encerrada pelo cliente\n'.encode())
        cliente.close()                                     # Fechando a conexão
        exit()

    cliente.send(mensagemCliente.encode())                         # Enviando a mensagem do cliente
    mensagemServidor = cliente.recv(2048)                          # Aguardando resposta do servidor
    print(f'< {ipServidor} >:', mensagemServidor.decode(), end='') # Mostrando a resposta do servidor para o cliente
##########################################################################################