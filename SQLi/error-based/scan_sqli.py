#!/usr/bin/python3
#
# scan_sqli.py - Programa para detectar SQLi (Error-Based)
#
# Autor     : Matheus Rodrigues
# Manutenção: Matheus Rodrigues
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa vai receber um site como primeiro parâmetro e informar ao usuário se este
#   site é vulnerável a SQLi (Error-Based). A deteção é baseada em mensagens de erro no HTML 
#   da página, as mensagens de erro estão prédefinidas em uma lista do programa.
#  
#   A URL informada pelo usuário deve estar sempre entre aspas duplas ("http://example.com"). 
#   Na URL deve conter parâmetros e valor para que possam ser testados
#   ("http://example.com?param1=valor&param2=valor").
# 
# Exemplos:
#   $ ./scan_sqli.py "http://example.com?param1=valor&param2=valor"
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 16/12/2023, Matheus Rodrigues
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - Kali GNU/Linux Rolling
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.5.0-kali3-amd64
#    Versão Bash         - 5.2.15
#
# -------------------------------- Importação de Pacotes --------------------------------
from urllib import parse
from copy import deepcopy
from sys import exit, argv
try:
    from requests import get        
except:
    print(f'Verifique se a biblioteca requests esta instalada')
    exit(1)
#
# ---------------------------------- Variaveis Globais ----------------------------------
nomeDoPrograma = argv[0]
coresDoPrograma = {
    'vermelho': '\033[1;31m',
    'verde': '\033[1;32m',
    'normal': '\033[m'
}
#
# --------------------------------------- Funções ---------------------------------------
def requisicaoURL(url):
    cabecalhoHTTP = {
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0'
    }

    try:
        # Fazendo requisição na página
        resposta = get(url, headers=cabecalhoHTTP, timeout=5)
        html = resposta.text
        return html
    except:
        pass


def vulneravel(html):
    # Lista de erros comuns em ataques SQLi (Error-Based)
    ListaDeErros = [
        'mysql_fetch_array()',                     # Banco de dados --> MySQL 
        'Call to a member function fetch_assoc()', # Banco de dados --> MySQL
        'You have an error in your SQL syntax'     # Banco de dados --> MariaDB 
    ]
    
    for erro in ListaDeErros:
        # Se contém a mensagem de erro na página retorne True
        if erro in html:
            return True
#
# --------------------------------- Execução do Programa ---------------------------------
try:
    # Primeiro argumento do programa dever ser a URL
    url = argv[1] 
except:
    # Se primeiro parâmetro não for informado encerre o programa
    print(f'Exemplo: \n\t{nomeDoPrograma} "http://example.com?param1=valor&param2=valor"')
    print(f'{coresDoPrograma["vermelho"]}\t# Coloque a URL sempre entre aspas duplas{coresDoPrograma["normal"]}')
    exit(0)

dominio = parse.urlparse(url).netloc
protocolo = parse.urlparse(url).scheme
urlParsed = parse.urlsplit(url)
parametros = parse.parse_qs(urlParsed.query)

for parametro in parametros.keys():
    requisicao = deepcopy(parametros)
    # Laço que vai injetar as aspas simples e aspas duplas nos parâmetros informados para verificar
    # se o site é vulnerável a SQLi (Error-Based)
    for caractere in '\'"':
        requisicao[parametro][0] = caractere
        novoParametro = parse.urlencode(requisicao, doseq=True)
        # Substituindo o valor do parâmetro informado pelo usuário para as aspas simples e aspas duplas
        urlFinal = urlParsed._replace(query=novoParametro)
        # Obtendo a URL final que vai ser feita a requisição com o valor do parâmetro ja pronto para injeção
        urlFinal = urlFinal.geturl()
        html = requisicaoURL(urlFinal)
        # Se requisição bem-sucedida entre na próxima estrutura condicional
        if html:
            # Se o site for vulnerável, as informações detalhadas serão exibidas para o usuário
            if vulneravel(html):
                print(f'{coresDoPrograma["verde"]}[+]{coresDoPrograma["normal"]} SQLi detectado')
                print(f'{coresDoPrograma["verde"]}[+]{coresDoPrograma["normal"]} Site: {protocolo}://{dominio}')
                print(f'{coresDoPrograma["verde"]}[+]{coresDoPrograma["normal"]} Parâmetro vulnerável: {parametro}')
                print(f'{coresDoPrograma["verde"]}[+]{coresDoPrograma["normal"]} URL vulnerável: {urlFinal}\n')
                exit(0)

print(f'{coresDoPrograma["vermelho"]}[-]{coresDoPrograma["normal"]} SQLi não detectado')
