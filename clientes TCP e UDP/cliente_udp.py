#!/usr/bin/python3
#
# cliente_udp.py - Um cliente para realizar conexões UDP
#
# Autor     : Matheus Rodrigues (mcarvalho)
# Manutenção: Matheus Rodrigues (mcarvalho)
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa é um cliente para estabelecer conexões do tipo UDP e manter há conexão
#   até que o usuário encerre a conexão com a palavra "sair"
# 
# Exemplos:
#   $ ./cliente_udp.py <ip> <porta>
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 29/08/2023, Matheus Rodrigues
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-79-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash         - 5.2.15
#
# -------------------------------- Importação de Pacotes --------------------------------
import socket # Bliblioteca built-in do Python
import sys    # Bliblioteca built-in do Python
import re     # Bliblioteca built-in do Python
#
# ---------------------------------- Variaveis Globais ----------------------------------
# Criando o cliente IPv4, UDP
cliente = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 

# ReGex que contém o padrão de IP que usuário deve informar ao programa
# Sendo esse padrão <0-255.0-255.0-255.0-255>
ipPadrao = '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'

# Obtendo IP do cliente
ipCliente = socket.gethostbyname(socket.gethostname())

coresDoPrograma = {
    'vermelho': '\033[31;1m',
    'normal': '\033[m'
}

nomeDoPrograma = sys.argv[0]

menuAjuda = f'''
{'#' * 40}
Modo de uso:
{nomeDoPrograma[2:]} <ip> <porta>
    {nomeDoPrograma[2:]} 192.168.0.1 22
{'#' * 40}
'''
#
# --------------------------------- Execução do Programa ---------------------------------
try:    # Verificando se usuário informou primeiro e segundo argumento
    ipServidor = sys.argv[1]         # Primeiro argumento deve ser o endereço IP
    portaServidor = int(sys.argv[2]) # Segundo argumento deve ser a Porta sendo do tipo inteiro
except: # Se o usuário não informou primeiro e segundo argumento imprima menu de ajuda na tela
    print(menuAjuda)
    exit()

if (not re.fullmatch(ipPadrao, ipServidor)): # Verificando se é um endereço IP válido
    print('Informe um endereço IP válido no formato: <0-255.0-255.0-255.0-255>')
    exit()
elif (portaServidor > 65535):                # Verificando se é uma porta válida
    print('Informe uma porta válida entre <0-65535>')
    exit()

print('Se quiser encerrar a conexão digite: SAIR')
print(f'{coresDoPrograma["vermelho"]}Após enviar sua mensagem aguarde a resposta do servidor{coresDoPrograma["normal"]}')

while True:
    mensagemCliente = input(f'< {ipCliente} >: ') + '\n'
    
    if (mensagemCliente.lower() == 'sair\n'): # Cliente encerrou a conexão 
        cliente.sendto('Conexão encerrada pelo cliente\n'.encode(), (ipServidor, portaServidor))
        cliente.close()                       # Fechando a conexão
        exit()

    cliente.sendto(mensagemCliente.encode(), (ipServidor, portaServidor))  # Enviando a mensagem do cliente
    mensagemServidor, dadosDoServidor = cliente.recvfrom(2048)             # Aguardando resposta do servidor
    print(f'< {dadosDoServidor[0]} >:', mensagemServidor.decode(), end='') # Mostrando a resposta do servidor para o cliente
##########################################################################################
