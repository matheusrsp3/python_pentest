#!/usr/bin/python3
#
# server_tcp.py - Um servidor TCP para conexão
#
# Autor     : Matheus Rodrigues
# Manutenção: Matheus Rodrigues
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa vai criar um servidor TCP abrindo uma porta de conexão que usuário
#   escolher, a conexão será encerrada quando o usuário utilizar a palavra "sair"
# 
# Exemplos:
#   $ ./server_tcp.py <porta>
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 30/08/2023, Matheus Rodrigues
#   - Inicio do programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-79-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash         - 5.2.15
#
# -------------------------------- Importação de Pacotes --------------------------------
import socket # Biblioteca built-in do Python
import sys    # Biblioteca built-in do Python
#
# ---------------------------------- Variaveis Globais ----------------------------------
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Criando o servidor IPv4, TCP 

ipServidor  = socket.gethostbyname(socket.gethostname())

coresDoPrograma = {
    'vermelho': '\033[31;1m',
    'normal': '\033[m'
}

nomeDoPrograma = sys.argv[0]

menuAjuda = f'''
{'#' * 40}
Modo de uso:
{nomeDoPrograma[2:]} <porta>
    {nomeDoPrograma[2:]} 1234
{'#' * 40}
'''
#
# --------------------------------- Execução do Programa ---------------------------------
try:    # Verificando se o usuário informou o primeiro argumento
    abrirPorta = int(sys.argv[1])
except: # Se o usuário não informou o primeiro argumento imprima o menu de ajuda
    print(menuAjuda)
    exit()

try:                                     # Tratando erros na abertura de portas
    server.bind(('0.0.0.0', abrirPorta)) # Definindo o endereço IP e a PORTA que vai ser aberta 
except (PermissionError):                # Usuário pode abrir somente well-known-ports ou porta ja está aberta
    print(f'{coresDoPrograma["vermelho"]}Você não tem permissão para abrir a porta {abrirPorta}\nVerifique o itens abaixo: \n{coresDoPrograma["normal"]}')
    print(f'A porta deve ser aberta a partir de 1024 em diante\nVerifique se a porta {abrirPorta} já esta aberta')
    exit()
except (OverflowError):                  # Usuário ultrapassou a maior porta que é 65535
    print('A porta deve ser aberta no seguinte intevalo 0-65535')
    exit()

print(f'{coresDoPrograma["vermelho"]}Aguardando conexão na porta ({abrirPorta})...\n{coresDoPrograma["normal"]}')
server.listen(2) # Suporta até 2 conexões simultâneamente
# Aguardando conexão do cliente, quando a conexão for realizada a porta que o usuário informou
# como primeiro argumento será aberta
clienteSocket, dadosDoCliente = server.accept()  

ipCliente = dadosDoCliente[0]       # Obtendo IP do cliente
portaDoCliente = dadosDoCliente[1]  # Obtendo PORTA do cliente
print(f'Conexão estabelecida com ({ipCliente}:{portaDoCliente})')
print('Se quiser encerrar a conexão digite: SAIR')
print(f'{coresDoPrograma["vermelho"]}Após enviar sua mensagem aguarde a resposta do cliente{coresDoPrograma["normal"]}')

while True:
    mensagemDoCliente = clienteSocket.recv(2048)
    print(f'< {ipCliente} >: {mensagemDoCliente.decode()}', end='')
    mensagemDoServidor = input(f'< {ipServidor} >: ') + '\n'
    if (mensagemDoServidor.lower() == 'sair\n'):
        clienteSocket.send('Conexão encerrada pelo servidor\n'.encode())
        server.close()
        exit()
    
    clienteSocket.send(mensagemDoServidor.encode())
##########################################################################################