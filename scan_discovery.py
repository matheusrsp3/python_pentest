#!/usr/bin/python3
#
# scan_discovery.py - Programa para fazer um directory listing em um site
#
# Autor     : Matheus Rodrigues (mcarvalho)
# Manutenção: Matheus Rodrigues (mcarvalho)
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Descreva aqui em baixo como o programa funciona detalhadamente
# 
# Exemplos:
#   $ ./scan_discovery.py
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 dd/mm/aaaa, autor
#   - Descreva oque tem nesta versão em tópicos
#   - Foi mudado o layout do programa
#   - Foi acrescentado uma nova função ao programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-78-generic
#    Versão Bash         - 5.1.16
#
# ---------------------------------------------------------------------------------------
# -------------------------------- Importação de Pacotes --------------------------------
# Verificando se não vai ocorrer nenhum erro pela falta do pacote [requests]
try:
    import requests
except (ModuleNotFoundError):
    print(f'O pacote [requests] não foi encontrado!')
    exit(1)

# Verificando se não vai ocorrer nenhum erro pela falta do pacote [pyfiglet]
try:
    import pyfiglet
except (ModuleNotFoundError):
    print(f'O pacote [pyfiglet] não foi encontrado!')
    exit(1)

# ---------------------------------- Variaveis Globais ----------------------------------
tituloPrograma = pyfiglet.figlet_format('Directory-Listing')

coresPrograma = {
    'vermelho': '\033[31;1m',
    'verde': '\033[32;1m',
    'normal': '\033[m'
}

# --------------------------------------- Funções ---------------------------------------
#
# --------------------------------- Execução do Programa ---------------------------------
print(tituloPrograma)

siteParaListagem = input('Site: ') # Site que vai ser realizado o directory listing
wordlistParaBusca = input('Wordlist: ') # Wordlist que o usuário deve passar para o programa

print()

# Validando se o arquivo que o usuário informou como wordlist existe
try:
    arquivoDeWordlist = open(wordlistParaBusca)
except (FileNotFoundError):
    print(f'Arquivo não foi encontrado - {coresPrograma["vermelho"]}[{wordlistParaBusca}]{coresPrograma["normal"]}')
    exit(1)

try:
    for linhaWordlist in arquivoDeWordlist.readlines():
        # Substituindo o sinal de '%0A' que indica uma quebra de linha no arquivo
        linhaWordlist = linhaWordlist.replace('\n', '') 
        requisicao = requests.get(f'{siteParaListagem}/{linhaWordlist}')
        if (requisicao.status_code == 200): # Status code HTTP 200 requisição bem sucedida
            print(f'{requisicao.url} - {coresPrograma["verde"]}Status Code: {requisicao.status_code}{coresPrograma["normal"]}')
        else: # Status code HTTP diferente de 200 requisição mal-sucedida
            print(f'{requisicao.url} - {coresPrograma["vermelho"]}Status Code: {requisicao.status_code}{coresPrograma["normal"]}')
except (KeyboardInterrupt):
    print('\nPrograma Encerrado...')